# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Task
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Managers"], operations: [create, update, read, delete] }
      { allow: groups, groups: ["Employees"], operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  status: String
}

type PrivateNote @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
}


type Broker @model @auth(
      rules: [
      { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
      { allow: groups, groups: ["users"], operations: [read] }
    ]
) {
  id: ID!
  name: String!
  primaryContact: String
}


type BrokerLogin @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  brokerUserName: String!
  brokerPassword: String!
  broker: Broker @hasOne
}


type TradeExecution @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  brokerLogin: BrokerLogin @hasOne
  ModelVersion: ModelVersion @hasOne
  positionSize: Float!
  activeEntry: Boolean
  activeExit: Boolean
}

type Model @model @auth(
      rules: [
      { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
      { allow: groups, groups: ["users"], operations: [read] }
    ]
) {
  id: ID!
  name: String!
  provider: Provider! @hasOne
  price: Float
  description: String
}

type ModelVersion @model @auth(
      rules: [
      { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
      { allow: groups, groups: ["users"], operations: [read] }
    ]
) {
  id: ID!
  current: Boolean
  model: Model! @hasOne
  versionNumber: Int!
}


type Provider @model @auth(
      rules: [
      { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
      { allow: groups, groups: ["users"], operations: [read] }
    ]
) {
  id: ID!
  name: String!
  primaryContact: String
}
